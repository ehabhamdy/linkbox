AWSTemplateFormatVersion: '2010-09-09'
Description: |
  LinkBox - Frontend (S3, CloudFront)
  Note: Uses OAI (OriginAccessIdentity) for simplicity.
  For production, consider migrating to OAC (OriginAccessControl).

Parameters:
  EnvironmentName:
    Type: String
    Default: linkbox
  PriceClass:
    Type: String
    Default: PriceClass_100

Resources:
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicPolicy: true
        BlockPublicAcls: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-frontend'

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontOAI
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt OAI.S3CanonicalUserId
            Action: s3:GetObject
            Resource: !Sub '${FrontendBucket.Arn}/*'

  # Note: OAI is being deprecated in favor of OAC (OriginAccessControl)
  # Using OAI here for learning simplicity; for production use OAC
  OAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub '${EnvironmentName} access identity'

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        PriceClass: !Ref PriceClass
        # SPA routing: return index.html for 404s
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt FrontendBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${OAI}'
          - Id: BackendALB
            DomainName: { "Fn::ImportValue": { "Fn::Sub": "${EnvironmentName}:ALBDNS" } }
            CustomOriginConfig:
              HTTPPort: 80
              OriginProtocolPolicy: http-only
        # Note: ForwardedValues is legacy; modern approach uses cache policies
        # Using ForwardedValues here for learning simplicity
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
          Compress: true
        CacheBehaviors:
          - PathPattern: '/api/*'
            TargetOriginId: BackendALB
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
            ForwardedValues:
              QueryString: true
              Headers: ['*']
            # Disable caching for API requests
            MinTTL: 0
            DefaultTTL: 0
            MaxTTL: 0
        Comment: !Sub '${EnvironmentName} CloudFront Distribution'
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-cloudfront'
        - Key: Project
          Value: LinkBox
        - Key: Environment
          Value: !Ref EnvironmentName

Outputs:
  FrontendBucketName:
    Value: !Ref FrontendBucket
    Export:
      Name: !Sub '${EnvironmentName}:FrontendBucket'
  CloudFrontDomain:
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${EnvironmentName}:CloudFrontDomain'
